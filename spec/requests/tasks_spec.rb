 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "Tasks request", type: :request do

  let!(:category) {Category.create!(name: 'Test Category')}
  let!(:task) {Task.create!(category_id: category.id, name: 'test name', body: 'this is a test body', task_date: Date.current)}

  before do
    sign_in create(:user)
  end
  
  describe "GET /show" do
    it "redirects to /categories/:category_id/tasks/:id" do
      get category_task_path(category.id, task.id)
      expect(response).to have_http_status(200)
      expect(response).to render_template(:show)
    end
  end

  describe "GET /new" do
    it "redirects to /categories/:category_id/tasks/new" do
      get new_category_task_path(category.id, task.id)
      expect(response).to have_http_status(200)
      expect(response).to render_template(:new)
    end
  end

  describe "GET /edit" do
    it "redirects to /categories/:category_id/tasks/:id/edit" do
      get edit_category_task_path(category.id, task.id)
      expect(response).to have_http_status(200)
      expect(response).to render_template(:edit)
    end
  end

  describe "POST /create" do
    it "after creating a task, redirects to the current selected category where task is created /categories/:category_id" do
      post category_tasks_path(category.id, task.id), :params => {:task => {category_id: category.id, name: 'test name', body: 'this is a test body', task_date: Date.current}}
      expect(response).to redirect_to("/categories/#{category.id}")
      expect(response).to have_http_status(302)
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested task" do
      delete category_task_path(category.id, task.id)
      expect(response).to redirect_to("/categories/#{category.id}")
      expect(response).to have_http_status(302)
    end
  end
end
